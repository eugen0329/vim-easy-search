Include: helper.vader

Execute(Guard):
  if !has('nvim') | finish | endif " TODO migrate to win ids
  let b:buf_var     = 'b:original'
  let w:win_var     = 'w:original'
  let &g:makeprg    = 'original'
  let &g:statusline = 'original'
  let &l:foldenable = 1
  let g:expected = {
    \  '&makeprg':    'local to buffer',
    \  '&equalprg':   'global',
    \  '&statusline': 'local to window',
    \  'b:buf_var':   'b:buf_var',
    \  'w:win_var':   'w:win_var',
    \  '&foldenable': 0,
    \  '&winhighlight': 'Normal:esearchNormalFloat',
    \}
  let g:bufnr = bufnr()
  let g:winid = win_getid()
  0tabnew
  $tabnew
  for _ in range(3)
    let g:guard = esearch#let#bufwin_restorable(g:bufnr, g:winid, g:expected)
    let actual = {
      \  '&makeprg':     getbufvar(g:bufnr, '&makeprg'),
      \  '&equalprg':    getbufvar(g:bufnr, '&equalprg'),
      \  '&statusline':  gettabwinvar(win_id2tabwin(g:winid)[0], g:winid, '&statusline'),
      \  '&foldenable':  gettabwinvar(win_id2tabwin(g:winid)[0], g:winid, '&foldenable'),
      \  '&winhighlight': gettabwinvar(win_id2tabwin(g:winid)[0], g:winid, '&winhighlight'),
      \  'b:buf_var':    getbufvar(g:bufnr, 'buf_var'),
      \  'w:win_var':    gettabwinvar(win_id2tabwin(g:winid)[0], g:winid, 'win_var'),
      \}
    AssertEqual g:expected, actual
    call g:guard.restore()
  endfor
