Include: helper.vader

Before:
  let g:esearch.cwd = 'spec/fixtures/mixed_undo_write'.g:test_number.next().'/'
  let g:file = g:esearch.cwd.'file.txt'
  let g:file1 = g:esearch.cwd.'file1.txt'
  let g:file2 = g:esearch.cwd.'file2.txt'
  let g:file3 = g:esearch.cwd.'file3.txt'

After:
  Assert UndotreeIsConsistent()

### Delte an arbitrary line in the window
##########################################

Execute (Write "-line1 ~line2 +line3"):
  call Fixture(g:file, ['l1', 'l2', 'l3'])
  call esearch#init()
  exe "norm /l1\<CR>dd/l2\<CR>A~~~\<ESC>/l3\<CR>A\<CR>added\<ESC>:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l2~~~', 'l3', 'added']
Expect:
  Matches in 3 lines, 1 file. Finished.

  file.txt
     1 l2~~~
     2 l3
     3 added

Execute (:undo :write saved "-line1 ~line2 +line3"):
  call Fixture(g:file, ['l1', 'l2', 'l3'])
  call esearch#init()
  exe "norm /l1\<CR>dd/l2\<CR>A~~~\<ESC>/l3\<CR>A\<CR>added\<ESC>:write\<CR>u:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l1', 'l2', 'l3']
Expect:
  Matches in 3 lines, 1 file. Finished.

  file.txt
     1 l1
     2 l2
     3 l3

Execute (2 times :undo->:write saved "-line1 ~line2 +line3"):
  call Fixture(g:file, ['l1', 'l2', 'l3'])
  call esearch#init()
  exe "norm /l1\<CR>dd/l2\<CR>A~~~\<ESC>/l3\<CR>A\<CR>added\<ESC>:write\<CR>u:write\<CR>u:write\<CR>"
Then:
  AssertEqual readfile(g:file), ['l2~~~', 'l3', 'added']
Expect:
  Matches in 3 lines, 1 file. Finished.

  file.txt
     1 l2~~~
     2 l3
     3 added

######################

Execute (Write "+line3(4 times)"):
  call Fixture(g:file, ['l1', 'l2', 'l3'])
  call esearch#init()
  exe "norm /l3\<CR>"
  exe "norm A\<CR>a"
  exe "norm A\<CR>b"
  exe "norm A\<CR>c"
  exe "norm A\<CR>d"
  write
Then:
  AssertEqual readfile(g:file), ['l1', 'l2', 'l3', 'a', 'b', 'c', 'd']
Expect:
  Matches in 3 lines, 1 file. Finished.

  file.txt
     1 l1
     2 l2
     3 l3
     4 a
     5 b
     6 c
     7 d

Execute (:undo :write saved "+line3(4 times)"):
  call Fixture(g:file, ['l1', 'l2', 'l3'])
  call esearch#init()
  exe "norm /l3\<CR>"
  exe "norm A\<CR>a"
  exe "norm A\<CR>b"
  exe "norm A\<CR>c"
  exe "norm A\<CR>d"
  write
  undo | doau TextChanged | write
Then:
  AssertEqual readfile(g:file), ['l1', 'l2', 'l3']
Expect:
  Matches in 3 lines, 1 file. Finished.

  file.txt
     1 l1
     2 l2
     3 l3

Execute (2 times :undo->:write saved "+line3(4 times)"):
  call Fixture(g:file, ['l1', 'l2', 'l3'])
  call esearch#init()
  exe "norm /l3\<CR>"
  exe "norm A\<CR>a"
  exe "norm A\<CR>b"
  exe "norm A\<CR>c"
  exe "norm A\<CR>d"
  write
  for _ in range(2)
    undo | doau TextChanged | write
  endfor
Then:
  AssertEqual readfile(g:file), ['l1', 'l2', 'l3', 'a', 'b', 'c', 'd']
Expect:
  Matches in 3 lines, 1 file. Finished.

  file.txt
     1 l1
     2 l2
     3 l3
     4 a
     5 b
     6 c
     7 d

######################

Execute (write "^line1(3) ~line2 +line3"):
  call Fixture(g:file, ['l1', 'l2', 'l3'])
  call esearch#init()
  exe "norm /file.txt\<CR>A\<CR>added1"
  exe "norm A\<CR>added2"
  exe "norm A\<CR>added3"

  exe "norm /l2\<CR>A~~~"
  exe "norm /l3\<CR>A\<CR>added4"
  write
Then:
  AssertEqual readfile(g:file), ['added1', 'added2', 'added3', 'l1', 'l2~~~', 'l3', 'added4']
Expect:
  Matches in 3 lines, 1 file. Finished.

  file.txt
     1 added1
     2 added2
     3 added3
     4 l1
     5 l2~~~
     6 l3
     7 added4

Execute (:undo->:write saved "^line1(3) ~line2 +line3"):
  call Fixture(g:file, ['l1', 'l2', 'l3'])
  call esearch#init()
  exe "norm /file.txt\<CR>A\<CR>added1"
  exe "norm A\<CR>added2"
  exe "norm A\<CR>added3"

  exe "norm /l2\<CR>A~~~"
  exe "norm /l3\<CR>A\<CR>added4"
  write
  undo | doau TextChanged | write
Then:
  AssertEqual readfile(g:file), ['l1', 'l2', 'l3']
Expect:
  Matches in 3 lines, 1 file. Finished.

  file.txt
     1 l1
     2 l2
     3 l3

Execute (2 times :undo->:write saved "^line1(3) ~line2 +line3"):
  call Fixture(g:file, ['l1', 'l2', 'l3'])
  call esearch#init()
  exe "norm /file.txt\<CR>A\<CR>added1"
  exe "norm A\<CR>added2"
  exe "norm A\<CR>added3"

  exe "norm /l2\<CR>A~~~"
  exe "norm /l3\<CR>A\<CR>added4"
  write
  exe "norm u:write\<CR>u:write\<CR>"
  for _ in range(2)
    undo | doau TextChanged | write
  endfor
Then:
  AssertEqual readfile(g:file), ['added1', 'added2', 'added3', 'l1', 'l2~~~', 'l3', 'added4']
Expect:
  Matches in 3 lines, 1 file. Finished.

  file.txt
     1 added1
     2 added2
     3 added3
     4 l1
     5 l2~~~
     6 l3
     7 added4

######################

Execute (write "+line1 ~line2 +line2"):
  call Fixture(g:file, ['l1', 'l2', 'l3'])
  call esearch#init()
  exe "norm /l1\<CR>A\<CR>added1"
  exe "norm /l2\<CR>A~~~"
  exe "norm /l2\<CR>A\<CR>added2"
  write
Then:
  AssertEqual readfile(g:file), ['l1', 'added1', 'l2~~~', 'added2', 'l3']
Expect:
  Matches in 3 lines, 1 file. Finished.

  file.txt
     1 l1
     2 added1
     3 l2~~~
     4 added2
     5 l3

Execute (:undo->:write saved "+line1 ~line2 +line2"):
  call Fixture(g:file, ['l1', 'l2', 'l3'])
  call esearch#init()
  exe "norm /l1\<CR>A\<CR>added1"
  exe "norm /l2\<CR>A~~~"
  exe "norm /l2\<CR>A\<CR>added2"
  write
  undo | doau TextChanged | write
Then:
  AssertEqual readfile(g:file), ['l1', 'l2', 'l3']
Expect:
  Matches in 3 lines, 1 file. Finished.

  file.txt
     1 l1
     2 l2
     3 l3

Execute (2 times :undo->:write saved "^line1(3) ~line2 +line3"):
  call Fixture(g:file, ['l1', 'l2', 'l3'])
  call esearch#init()
  exe "norm /l1\<CR>A\<CR>added1"
  exe "norm /l2\<CR>A~~~"
  exe "norm /l2\<CR>A\<CR>added2"
  write
  exe "norm u:write\<CR>u:write\<CR>"
  for _ in range(2)
    undo | doau TextChanged | write
  endfor
Then:
  AssertEqual readfile(g:file), ['l1', 'added1', 'l2~~~', 'added2', 'l3']
Expect:
  Matches in 3 lines, 1 file. Finished.

  file.txt
     1 l1
     2 added1
     3 l2~~~
     4 added2
     5 l3

######################

Execute (write file1-2: "-line2" file2: "-line2"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call esearch#init()
  exe "norm /1.l2\<CR>dd"
  exe "norm /2.l2\<CR>dd"
  write
Then:
  AssertEqual readfile(g:file1), ['1.l1', '1.l3']
  AssertEqual readfile(g:file2), ['2.l1', '2.l3']
Expect:
  Matches in 6 lines, 2 files. Finished.

  file1.txt
     1 1.l1
     2 1.l3

  file2.txt
     1 2.l1
     2 2.l3

Execute (:undo->:write saved file1-2: "-line2" file2: "-line2"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call esearch#init()
  exe "norm /1.l2\<CR>dd"
  exe "norm /2.l2\<CR>dd"
  write
  undo | doau TextChanged | write
Then:
  AssertEqual readfile(g:file1), ['1.l1', '1.l2', '1.l3']
  AssertEqual readfile(g:file2), ['2.l1', '2.l2', '2.l3']
Expect:
  Matches in 6 lines, 2 files. Finished.

  file1.txt
     1 1.l1
     2 1.l2
     3 1.l3

  file2.txt
     1 2.l1
     2 2.l2
     3 2.l3

Execute (2 times :undo->:write saved file1-2: "-line2" file2: "-line2"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call esearch#init()
  exe "norm /1.l2\<CR>dd"
  exe "norm /2.l2\<CR>dd"
  write
  for _ in range(2)
    undo | doau TextChanged | write
  endfor
Then:
  AssertEqual readfile(g:file1), ['1.l1', '1.l3']
  AssertEqual readfile(g:file2), ['2.l1', '2.l3']
Expect:
  Matches in 6 lines, 2 files. Finished.

  file1.txt
     1 1.l1
     2 1.l3

  file2.txt
     1 2.l1
     2 2.l3

######################

Execute (write file1: "-line1-2" file2: "-line1-2"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call esearch#init()
  exe "norm /1.l1\<CR>dj"
  exe "norm /2.l1\<CR>dj"
  write
Then:
  AssertEqual readfile(g:file1), ['1.l3']
  AssertEqual readfile(g:file2), ['2.l3']
Expect:
  Matches in 6 lines, 2 files. Finished.

  file1.txt
     1 1.l3

  file2.txt
     1 2.l3

Execute (:undo->:write saved file1: "-line1-2" file2: "-line1-2"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call esearch#init()
  exe "norm /1.l1\<CR>dj"
  exe "norm /2.l1\<CR>dj"
  write
  undo | doau TextChanged | write
Then:
  AssertEqual readfile(g:file1), ['1.l1', '1.l2', '1.l3']
  AssertEqual readfile(g:file2), ['2.l1', '2.l2', '2.l3']
Expect:
  Matches in 6 lines, 2 files. Finished.

  file1.txt
     1 1.l1
     2 1.l2
     3 1.l3

  file2.txt
     1 2.l1
     2 2.l2
     3 2.l3

Execute (2 times :undo->:write saved file1: "-line1-2" file2: "-line1-2"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call esearch#init()
  exe "norm /1.l1\<CR>dj"
  exe "norm /2.l1\<CR>dj"
  write
  for _ in range(2)
    undo | doau TextChanged | write
  endfor
Then:
  AssertEqual readfile(g:file1), ['1.l3']
  AssertEqual readfile(g:file2), ['2.l3']
Expect:
  Matches in 6 lines, 2 files. Finished.

  file1.txt
     1 1.l3

  file2.txt
     1 2.l3

######################

Execute (write file1-2: "-line1 ~line2 +line3"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call esearch#init()
  exe "norm /1.l1\<CR>dd"
  exe "norm /1.l2\<CR>A~~~"
  exe "norm /1.l3\<CR>A\<CR>1.added"
  exe "norm /2.l1\<CR>dd"
  exe "norm /2.l2\<CR>A~~~"
  exe "norm /2.l3\<CR>A\<CR>2.added"
  write
Then:
  AssertEqual readfile(g:file1), ['1.l2~~~', '1.l3', '1.added']
  AssertEqual readfile(g:file2), ['2.l2~~~', '2.l3', '2.added']
Expect:
  Matches in 6 lines, 2 files. Finished.

  file1.txt
     1 1.l2~~~
     2 1.l3
     3 1.added

  file2.txt
     1 2.l2~~~
     2 2.l3
     3 2.added

Execute (:undo->:write saved file1-2: "-line1 ~line2 +line3"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call esearch#init()
  exe "norm /1.l1\<CR>dd"
  exe "norm /1.l2\<CR>A~~~"
  exe "norm /1.l3\<CR>A\<CR>1.added"
  exe "norm /2.l1\<CR>dd"
  exe "norm /2.l2\<CR>A~~~"
  exe "norm /2.l3\<CR>A\<CR>2.added"
  write
  undo | doau TextChanged | write
Then:
  AssertEqual readfile(g:file1), ['1.l1', '1.l2', '1.l3']
  AssertEqual readfile(g:file2), ['2.l1', '2.l2', '2.l3']
Expect:
  Matches in 6 lines, 2 files. Finished.

  file1.txt
     1 1.l1
     2 1.l2
     3 1.l3

  file2.txt
     1 2.l1
     2 2.l2
     3 2.l3

Execute (2 times :undo->:write saved file1-2: "-line1 ~line2 +line3"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call esearch#init()
  exe "norm /1.l1\<CR>dd"
  exe "norm /1.l2\<CR>A~~~"
  exe "norm /1.l3\<CR>A\<CR>1.added"
  exe "norm /2.l1\<CR>dd"
  exe "norm /2.l2\<CR>A~~~"
  exe "norm /2.l3\<CR>A\<CR>2.added"
  write
  for _ in range(2)
    undo | doau TextChanged | write
  endfor
Then:
  AssertEqual readfile(g:file1), ['1.l2~~~', '1.l3', '1.added']
  AssertEqual readfile(g:file2), ['2.l2~~~', '2.l3', '2.added']
Expect:
  Matches in 6 lines, 2 files. Finished.

  file1.txt
     1 1.l2~~~
     2 1.l3
     3 1.added

  file2.txt
     1 2.l2~~~
     2 2.l3
     3 2.added

### 3 files
####################################

Execute (write in 3 files: "-line2" ):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call Fixture(g:file3, ['3.l1', '3.l2', '3.l3'])
  call esearch#init()
  exe "norm /1.l2\<CR>dd"
  exe "norm /2.l2\<CR>dd"
  exe "norm /3.l2\<CR>dd"
  write
Then:
  AssertEqual readfile(g:file1), ['1.l1', '1.l3']
  AssertEqual readfile(g:file2), ['2.l1', '2.l3']
  AssertEqual readfile(g:file3), ['3.l1', '3.l3']
Expect:
  Matches in 9 lines, 3 files. Finished.

  file1.txt
     1 1.l1
     2 1.l3

  file2.txt
     1 2.l1
     2 2.l3

  file3.txt
     1 3.l1
     2 3.l3

Execute (:undo->:write saved "+line1 ~line2 +line2"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call Fixture(g:file3, ['3.l1', '3.l2', '3.l3'])
  call esearch#init()
  exe "norm /1.l2\<CR>dd"
  exe "norm /2.l2\<CR>dd"
  exe "norm /3.l2\<CR>dd"
  write
  undo | doau TextChanged | write
Then:
  AssertEqual readfile(g:file1), ['1.l1', '1.l2', '1.l3']
  AssertEqual readfile(g:file2), ['2.l1', '2.l2', '2.l3']
  AssertEqual readfile(g:file3), ['3.l1', '3.l2', '3.l3']
Expect:
  Matches in 9 lines, 3 files. Finished.

  file1.txt
     1 1.l1
     2 1.l2
     3 1.l3

  file2.txt
     1 2.l1
     2 2.l2
     3 2.l3

  file3.txt
     1 3.l1
     2 3.l2
     3 3.l3

Execute (2 times :undo->:write saved "^line1(3) ~line2 +line3"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call Fixture(g:file3, ['3.l1', '3.l2', '3.l3'])
  call esearch#init()
  exe "norm /1.l2\<CR>dd"
  exe "norm /2.l2\<CR>dd"
  exe "norm /3.l2\<CR>dd"
  write
  for _ in range(2)
    undo | doau TextChanged | write
  endfor
Then:
  AssertEqual readfile(g:file1), ['1.l1', '1.l3']
  AssertEqual readfile(g:file2), ['2.l1', '2.l3']
  AssertEqual readfile(g:file3), ['3.l1', '3.l3']
Expect:
  Matches in 9 lines, 3 files. Finished.

  file1.txt
     1 1.l1
     2 1.l3

  file2.txt
     1 2.l1
     2 2.l3

  file3.txt
     1 3.l1
     2 3.l3

### 2 lines from 3 files
######################

Execute (write 3 file: "-line1-2"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call Fixture(g:file3, ['3.l1', '3.l2', '3.l3'])
  call esearch#init()
  exe "norm /1.l2\<CR>dj"
  exe "norm /2.l2\<CR>dj"
  exe "norm /3.l2\<CR>dj"
  write
Then:
  AssertEqual readfile(g:file1), ['1.l1']
  AssertEqual readfile(g:file2), ['2.l1']
  AssertEqual readfile(g:file3), ['3.l1']
Expect:
  Matches in 9 lines, 3 files. Finished.

  file1.txt
     1 1.l1

  file2.txt
     1 2.l1

  file3.txt
     1 3.l1

Execute (:undo->:write saved file1: "-line1-2" file2: "-line1-2"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call Fixture(g:file3, ['3.l1', '3.l2', '3.l3'])
  call esearch#init()
  exe "norm /1.l2\<CR>dj"
  exe "norm /2.l2\<CR>dj"
  exe "norm /3.l2\<CR>dj"
  write
  undo | doau TextChanged | write
Then:
  AssertEqual readfile(g:file1), ['1.l1', '1.l2', '1.l3']
  AssertEqual readfile(g:file2), ['2.l1', '2.l2', '2.l3']
  AssertEqual readfile(g:file3), ['3.l1', '3.l2', '3.l3']
Expect:
  Matches in 9 lines, 3 files. Finished.

  file1.txt
     1 1.l1
     2 1.l2
     3 1.l3

  file2.txt
     1 2.l1
     2 2.l2
     3 2.l3

  file3.txt
     1 3.l1
     2 3.l2
     3 3.l3

Execute (2 times :undo->:write saved file1: "-line1-2" file2: "-line1-2"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call Fixture(g:file3, ['3.l1', '3.l2', '3.l3'])
  call esearch#init()
  exe "norm /1.l2\<CR>dj"
  exe "norm /2.l2\<CR>dj"
  exe "norm /3.l2\<CR>dj"
  write
  for _ in range(2)
    undo | doau TextChanged | write
  endfor
Then:
  AssertEqual readfile(g:file1), ['1.l1']
  AssertEqual readfile(g:file2), ['2.l1']
  AssertEqual readfile(g:file3), ['3.l1']
Expect:
  Matches in 9 lines, 3 files. Finished.

  file1.txt
     1 1.l1

  file2.txt
     1 2.l1

  file3.txt
     1 3.l1

" ######################

Execute (write 3 files: "-line1 ~line2 +line3"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call Fixture(g:file3, ['3.l1', '3.l2', '3.l3'])
  call esearch#init()
  exe "norm /1.l1\<CR>dd"
  exe "norm /1.l2\<CR>A~~~"
  exe "norm /1.l3\<CR>A\<CR>1.added"

  exe "norm /2.l1\<CR>dd"
  exe "norm /2.l2\<CR>A~~~"
  exe "norm /2.l3\<CR>A\<CR>2.added"

  exe "norm /3.l1\<CR>dd"
  exe "norm /3.l2\<CR>A~~~"
  exe "norm /3.l3\<CR>A\<CR>3.added"
  write
Then:
  AssertEqual readfile(g:file1), ['1.l2~~~', '1.l3', '1.added']
  AssertEqual readfile(g:file2), ['2.l2~~~', '2.l3', '2.added']
  AssertEqual readfile(g:file3), ['3.l2~~~', '3.l3', '3.added']
Expect:
  Matches in 9 lines, 3 files. Finished.

  file1.txt
     1 1.l2~~~
     2 1.l3
     3 1.added

  file2.txt
     1 2.l2~~~
     2 2.l3
     3 2.added

  file3.txt
     1 3.l2~~~
     2 3.l3
     3 3.added

Execute (:undo->:write saved 3 file: "-line1 ~line2 +line3"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call Fixture(g:file3, ['3.l1', '3.l2', '3.l3'])
  call esearch#init()
  exe "norm /1.l1\<CR>dd"
  exe "norm /1.l2\<CR>A~~~"
  exe "norm /1.l3\<CR>A\<CR>1.added"

  exe "norm /2.l1\<CR>dd"
  exe "norm /2.l2\<CR>A~~~"
  exe "norm /2.l3\<CR>A\<CR>2.added"

  exe "norm /3.l1\<CR>dd"
  exe "norm /3.l2\<CR>A~~~"
  exe "norm /3.l3\<CR>A\<CR>3.added"
  write
  undo | doau TextChanged | write
Then:
  AssertEqual readfile(g:file1), ['1.l1', '1.l2', '1.l3']
  AssertEqual readfile(g:file2), ['2.l1', '2.l2', '2.l3']
  AssertEqual readfile(g:file3), ['3.l1', '3.l2', '3.l3']
Expect:
  Matches in 9 lines, 3 files. Finished.

  file1.txt
     1 1.l1
     2 1.l2
     3 1.l3

  file2.txt
     1 2.l1
     2 2.l2
     3 2.l3

  file3.txt
     1 3.l1
     2 3.l2
     3 3.l3

Execute (2 times :undo->:write saved 3 files: "-line1 ~line2 +line3"):
  call Fixture(g:file1, ['1.l1', '1.l2', '1.l3'])
  call Fixture(g:file2, ['2.l1', '2.l2', '2.l3'])
  call Fixture(g:file3, ['3.l1', '3.l2', '3.l3'])
  call esearch#init()
  exe "norm /1.l1\<CR>dd"
  exe "norm /1.l2\<CR>A~~~"
  exe "norm /1.l3\<CR>A\<CR>1.added"

  exe "norm /2.l1\<CR>dd"
  exe "norm /2.l2\<CR>A~~~"
  exe "norm /2.l3\<CR>A\<CR>2.added"

  exe "norm /3.l1\<CR>dd"
  exe "norm /3.l2\<CR>A~~~"
  exe "norm /3.l3\<CR>A\<CR>3.added"
  write
  for _ in range(2)
    undo | doau TextChanged | write
  endfor
Then:
  AssertEqual readfile(g:file1), ['1.l2~~~', '1.l3', '1.added']
  AssertEqual readfile(g:file2), ['2.l2~~~', '2.l3', '2.added']
  AssertEqual readfile(g:file3), ['3.l2~~~', '3.l3', '3.added']
Expect:
  Matches in 9 lines, 3 files. Finished.

  file1.txt
     1 1.l2~~~
     2 1.l3
     3 1.added

  file2.txt
     1 2.l2~~~
     2 2.l3
     3 2.added

  file3.txt
     1 3.l2~~~
     2 3.l3
     3 3.added
