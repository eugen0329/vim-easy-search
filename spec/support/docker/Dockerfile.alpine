# Build pt stage
##########################################
FROM golang:1.12.14-alpine3.10 AS build-pt

RUN set -eux; \
    apk add --no-cache git; \
    go get -u github.com/monochromegane/the_platinum_searcher/... ; \
    echo $GOPATH; \
    $GOPATH/bin/pt --version; \
    $GOPATH/bin/pt --help; \
    apk del git

# Build rspec stage
##########################################
FROM ruby:2.7-alpine3.10

ARG APP_DIR=/app
ARG DEPS_DIR=/deps
ARG BIN_DIR=$DEPS_DIR/bin
ARG PLUGINS_DIR=$DEPS_DIR/plugins
# Sneak-peek into xvfb (+5mb). Should be empty on CI
ARG DEBUG_PACKAGES='x11vnc xterm scrot'

ENV PLUGINS_DIR=$PLUGINS_DIR
ENV BIN_DIR=$BIN_DIR
# hmm
ENV LANG=C.UTF-8
# Xvfb (even console vim +clientserver depends on X11)
ENV DISPLAY=:99
# Allow NeoVim run as a non-root (otherwise it'll try to create /.local and fail
# with insufficient privileges error)
ENV XDG_DATA_HOME=$DEPS_DIR/XDG_DATA_HOME

WORKDIR $DEPS_DIR

COPY --from=build-pt /go/bin/pt $BIN_DIR/pt
COPY Gemfile* spec/support/provision spec/support/docker/docker-entrypoint.sh $DEPS_DIR/

RUN set -eux; \
# Runtime dependencies
    apk add --update --no-cache xvfb python3 git $DEBUG_PACKAGES; \
# Build dependencies
    apk add --no-cache --virtual .builddeps gcc python3-dev musl-dev make wget tar; \
# Python dependencies
    pip3 install --no-cache --upgrade pip neovim-remote; \
# Ruby dependencies
    echo 'gem: --no-document' >> /etc/gemrc; \
    gem install bundler; \
    bundle config set no-cache 'true'; \
    bundle config set frozen 'true'; \
    bundle install; \
# OS dependencies
# Clearly an antipattern, but we have to be able to reuse this scripts for
# various builds including different base images, different platforms and
# travis-ci, so it's an acceptable trade-off
    sh alpine.sh $BIN_DIR $PLUGINS_DIR; \
# Temprorary fix for neovim .appimage which is not working under alpine distro so far
    apk add --no-cache neovim; \
    mkdir -p $BIN_DIR/squashfs-root/usr/bin; ln -s /usr/bin/nvim $BIN_DIR/squashfs-root/usr/bin/nvim; \
# Allow NeoVim to create rplugin manifest
    mkdir -p $XDG_DATA_HOME; \
    chmod a+w $XDG_DATA_HOME; \
# Allow run container without app dir volume mounted
    mkdir -p $APP_DIR; \
# Cleanup
    apk del --no-network .builddeps ; \
    rm -rf ~/.bundle/cache/; \
    yes | pip3 uninstall pip;

WORKDIR $APP_DIR
ENTRYPOINT ["$DEPS_DIR/docker-entrypoint.sh"]
CMD ["sh"]
