Include: helper.vader

Before:
  Save g:esearch
  let g:esearch.cwd = 'spec/fixtures/filemanager/'
  let g:file1 = 'dir1/file1.txt'
  let g:file2 = 'file2.txt'
  call esearch#stderr#incremental('workaround to avoid vader bug', ['with autoload fail'])
  exe 'bwipe' Fixture(g:esearch.cwd.g:file1, ['1.l1', '1.l2'])
  exe 'bwipe' Fixture(g:esearch.cwd.g:file2, ['2.l1', '2.l2'])

  let g:NETRPreviewDefaultOn = 0
  call NetrangerInit()
  au! NETRANGER_LAZY_INIT
  au! NETRANGER BufEnter
  au! NERDTreeHijackNetrw
  au FileType defx nnoremap <nowait><buffer><expr><cr> defx#do_action('open_or_close_tree')
  au FileType fern nmap <nowait><buffer><cr> :exe 'FernReveal' fern#helper#new().sync.get_cursor_node().name '-wait'<CR>
After:
  Restore g:esearch

Execute(search in partent directory when filename is hovered):
  " Defx is harder to setup for neovim, netranger fails in vim
  for open_filer in has('nvim') ? ['Fern -wait', 'NETRTabdrop', 'NERDTree', 'Dirvish'] : ['Defx']
    Log open_filer

    Log "\tdir hover"
    exe open_filer g:esearch.cwd
    exe "norm /dir1\<CR>\<plug>(esearch).\<CR>"
    AssertEqual join(getline(1, '$'), "\n"), join([
        \ 'Matches in 2 lines, 1 file. Finished.',
        \ '',
        \ 'dir1/file1.txt',
        \ '   1 1.l1',
        \ '   2 1.l2',
        \], "\n")

    Log "\tfile inside of a dir hover"
    exe open_filer g:esearch.cwd
    exe "norm /dir1\<CR>\<CR>/file1\<CR>\<plug>(esearch).\<CR>"
    AssertEqual join(getline(1, '$'), "\n"), join([
        \ 'Matches in 2 lines, 1 file. Finished.',
        \ '',
        \ 'dir1/file1.txt',
        \ '   1 1.l1',
        \ '   2 1.l2',
        \], "\n")

    Log "\tfile VISUAL"
    exe open_filer g:esearch.cwd
    exe "norm /file2\<CR>V\<plug>(operator-esearch-exec).\<CR>"
    AssertEqual join(getline(1, '$'), "\n"), join([
        \ 'Matches in 2 lines, 1 file. Finished.',
        \ '',
        \ 'file2.txt',
        \ '   1 2.l1',
        \ '   2 2.l2',
        \], "\n")

    Log "\trange VISUAL"
    exe open_filer g:esearch.cwd
    exe "norm /dir1\<CR>VG\<plug>(operator-esearch-exec).\<CR>"
    AssertEqual join(getline(1, '$'), "\n"), join([
        \ 'Matches in 4 lines, 2 files. Finished.',
        \ '',
        \ 'dir1/file1.txt',
        \ '   1 1.l1',
        \ '   2 1.l2',
        \ '',
        \ 'file2.txt',
        \ '   1 2.l1',
        \ '   2 2.l2',
        \], "\n")
  endfor
